name: Main Meme_Collection Workflow
on:
  push:
    branches:
      - main
jobs:
  linters:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./backend/requirements.txt
    - name: Check with flake8
      run: python -m flake8 --exclude backend/alembic/ backend/
    - name: Check with mypy
      run: |
        python -m pip install types-psycopg2
        python -m pip install types-fpdf2
        python -m mypy --exclude backend/alembic/ backend/
  tests:
    needs: linters
    runs-on: ubuntu-latest
    services:
      minio:
        image:
          name: lazybit/minio
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: ${{ secrets.MINIO_ROOT_USER }}
          MINIO_ROOT_PASSWORD: ${{ secrets.MINIO_ROOT_PASSWORD }}
        volumes:
          - ${{ github.workspace }}/data:/data
        options: --name=minio --health-cmd "curl http://localhost:9000/minio/health/live"
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ./backend/requirements.txt
    - name: Start tests
      run: |
        touch .env
        echo ENDPOINT=${{ secrets.ENDPOINT }} >> .env
        echo API_ENDPOINT=${{ secrets.API_ENDPOINT }} >> .env
        echo ACCESS_KEY=${{ secrets.MINIO_ROOT_USER }} >> .env
        echo SECRET_KEY=${{ secrets.MINIO_ROOT_PASSWORD }} >> .env
        echo BUCKET=${{ secrets.BUCKET }} >> .env
        cat .env
        from minio import Minio
            from minio.error import ResponseError

            try:
                minio = Minio(
                    'localhost:9000',
                    access_key='${{ secrets.MINIO_ACCESS_KEY }}',
                    secret_key='${{ secrets.MINIO_SECRET_KEY }}',
                    secure=False
                )
            except Exception as ex:
                raise

            minio.make_bucket(BUCKET)
        cd backend/
        cd ..
        cd tests/
        python -m pytest
